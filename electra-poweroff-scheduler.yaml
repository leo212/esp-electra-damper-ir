esphome:
  name: ir-remote
  platform: ESP8266
  board: d1_mini

  includes:
    - patch.h
    
globals:
  - id: retransmit
    type: bool
    restore_value: no 
  - id: retransmit_str
    type: std::string
    restore_value: no
  - id: retransmit_codes
    type: std::vector<int>
    restore_value: no
    
remote_receiver:
  id: electra_auto_turn_off
  pin: 
    number: D4
    inverted: yes
    #mode: INPUT_PULLUP
  tolerance: 40%
  filter: 200us
  dump: raw
  
  on_raw:
    then:
      - lambda: |- 
          std::string binStr="";
          std::vector<int> binValues;
          int binSize=0;
          int i=0;
          
          for(int j=0; j<3; j++) {
            // reset binary values
            binStr = "";
            binValues.clear();
            
            if (x[i] > 2500) {
               // skip first header of 3000
               i++;
            }
            if (x[i] < -2500 && x[i] > -3500) {
              // skip second header of -3000
              i++;
            }
            else if (x[i] < -2500) {
              // second header got together with -1000 value, reduce it
              x[i]+=3000;
            }
            
            // go over all of the values until we reached a header again
            while(x[i]<2500) {
              int val = x[i];
              if (val > 0) {
                  binValues.push_back(0);
                  if (val > 1500) { 
                      binValues.push_back(0);
                  }
              }
              else {
                  binValues.push_back(1);
                  if (val < -1500) { 
                      binValues.push_back(1);
                  }
              }
              i++;
            }
          }
          
          // if this is an electra remote message
          if (binValues.size() == 68) {          
            int last = binValues[0];
            i=1;
            
            while (i<binValues.size()) {
              if (last == 0 && binValues[i]==1) { binStr+="0";i+=2;last=binValues[i-1];} 
              else if (last == 1 && binValues[i]==0) { binStr+="1";i+=2;last=binValues[i-1];} 
              else i++;
            }
            
            std::string convertedStr(34,'0');
            
            // copy values from bit 2 to 15 (mode,fanmode, ifeel, swingmode and temperature)
            for (i=1; i<16; i++)
              convertedStr[i] = binStr[i];
                            
            // set timer to 01:00 from now
            convertedStr[28] = '1';
            convertedStr[29] = '0';
            convertedStr[30] = '0';  //set to 1 for 01:30 timer;
            convertedStr[31] = '0';  //set to 1 for 01:30 timer;
            
            // add footer
            convertedStr[32] = '1';
            convertedStr[33] = '0';
            
            printf("original signal :%s\r\nconverted signal:%s\r\n",binStr.c_str(), convertedStr.c_str());
            
            std::vector<int> unencoded_codes;
            std::vector<int> codes;
            
            for (int i=0; i<convertedStr.size(); i++) {
              if (convertedStr[i] == '0') {
                unencoded_codes.push_back(1);
                unencoded_codes.push_back(0);
              } else {
                unencoded_codes.push_back(0);
                unencoded_codes.push_back(1);
              }
            }
               
            for(int j=0; j<3; j++) {
                codes.push_back(3000);
                int signalPositive = false;
                int signalLength = 3000;
                int i=0;
                while (i<unencoded_codes.size()) {
                  if (signalPositive) {
                    if (unencoded_codes[i] == 1) {
                      signalLength+=1000;
                    } else {
                      if (signalLength > 0) {
                        codes.push_back(signalLength);
                        signalPositive = false;
                        signalLength = 1000;
                      }
                    }
                  } else {
                    if (unencoded_codes[i] == 0) {
                      signalLength+=1000;
                    } else {
                      if (signalLength > 0) {
                        codes.push_back(-signalLength);
                        signalPositive = true;
                        signalLength = 1000;
                      }
                    }
                  }
                  i++;
                }
                if (signalPositive) {
                  codes.push_back(signalLength);
                }
                else {
                  codes.push_back(-signalLength);
                }
            }
            codes.push_back(4000);
            
            // re-transmit only if we got power button press
            if (binValues[0]==1) {
              id(retransmit_str) = binStr;
              id(retransmit_codes) = codes;
              id(retransmit) = true;
            } else {
              id(retransmit) = false;
            }
          }
      - delay: 5s
      - lambda: |-
          if (id(retransmit)) {                                  
            std::vector<int> schedule_codes = id(retransmit_codes);
            std::string codesStr = "";
            for(int i=0; i<schedule_codes.size(); i++) {
              codesStr += patch::to_string(schedule_codes[i]) + ",";
            }
            printf("%s", codesStr.c_str());
            
            auto transmit = id(remote_send)->transmit();
            transmit.get_data()->set_data(schedule_codes);
            transmit.get_data()->set_carrier_frequency(38000);
            transmit.perform();	
            id(retransmit) = false;
          }
        
      
remote_transmitter:
  id: remote_send
  pin: D3
  carrier_duty_percent: 50%

# Enable logging
logger:
  level: DEBUG